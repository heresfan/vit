#!/usr/bin/perl -w
#require "/home/ping/work/bin/api.pl";
require "./api.pl";

#====================== Main ===================================
my $src_path = "";
my $base_path = "$ENV{'HOME'}/.projectdata";
my $prj_name = '';

#init the base dir and base file
-d "$base_path" || system "mkdir $base_path" || die "creating $base_path failure, plz check your priveleges\n";
-f "$base_path/projects" || system "touch $base_path/projects" || die "creating $base_path/projects failure\n";

if(@ARGV == 0)
{
    &printUage();
}
elsif($ARGV[0] eq "create" || $ARGV[0] eq "c")
{
    #get the project name if not provided
    if(@ARGV == 1)
    {
        print "plz enter the project name\n";
        $prj_name = <STDIN>;
        chomp $prj_name;

        print "plz enter the source code path\n";
        $src_path = <STDIN>;
        chomp $src_path;
    }
    elsif(@ARGV == 2)
    {
        print "plz enter the source code path\n";
        $src_path = <STDIN>;
        chomp $src_path;


        $prj_name = $ARGV[1];
    }
    elsif(@ARGV == 3)
    {
        $prj_name = $ARGV[1];
        $src_path = $ARGV[2];

        chomp $prj_name;
        chomp $src_path;
    }
    else
    {
        &printUage();
        exit 0;
    }

    # = get the excluded filetype and directories
    print "Any excluded filetypes(default to c, cc, cpp, h, js, x, s, S)?\n";
    my @exclfile;
    my @excldir;
    while(<STDIN>)
    {
        chomp $_;
        if($_ eq '')
        {
            last;
        }
        push @exclfile, "$_";
    }
    print "Any excluded directories in the src path(default to none)?\n";
    while(<STDIN>)
    {
        chomp $_;
        if($_ eq '')
        {
            last;
        }
        push @excldir, "$_";
    }

    -d "$src_path" || die "$src_path not existing\n";
    # test if the path exits
    (! -d "$base_path/$prj_name") || die "project existing\n";

    (! system "mkdir $base_path/$prj_name > /dev/null 2>&1") || die "Creating project failed:no priveleges to create the dir\n";

    #log the path info into path_info file
    if(system "touch $base_path/$prj_name/path_info > /dev/null 2>&1")
    {
        print "Parsing failure:unable to create path_info file";
        &clear($prj_name);
        return 1;
    }
    else
    {
        if(open(PATH_INFO, ">$base_path/$prj_name/path_info"))
        {
            print PATH_INFO "[src_path]\n$src_path\n";
            if(@excldir != 0)
            {
                print PATH_INFO "[excluded_path]\n";
                foreach(@excldir)
                {
                    print PATH_INFO "$_\n";
                }
            }
            if(@exclfile != 0)
            {
                print PATH_INFO "[excluded_filetype]\n";
                foreach(@exclfile)
                {
                    print PATH_INFO "$_\n";
                }
            }
        }
        else
        {
            print "Parsing failure:unable to write path_info file";
            &clear($prj_name);
            return 1;
        }
    }
    &parseProject($prj_name, $src_path);
}
elsif($ARGV[0] eq "open" || $ARGV[0] eq "o")
{
    my $working_dir_cmd;
    my @val;

    if(@ARGV == 1)
    {
        $prj_name = <STDIN>;
        chomp $prj_name;
    }
    elsif(@ARGV == 2)
    {
        $prj_name = $ARGV[1];
    }
    else
    {
        &printUage();
        exit 0;
    }

    -d "$base_path/$prj_name" || die "project $prj_name not existing\n";

    #get the working dir
    @val = &get_conf_section("$base_path/$prj_name/path_info", 'src_path');
    if(@val == 0)
    {
        print "Failed to open $prj_name\n";
        exit 1;
    }
    $working_dir_cmd = $val[0];
    print "$working_dir_cmd\n";

    $working_dir_cmd = "NERDTree " . $working_dir_cmd;

    #open the project with vim
    (! system "vim -c \"$working_dir_cmd\" -c \"set tags=$base_path/$prj_name/tags\" -c \"cs add $base_path/$prj_name/cscope.out\"")
           || die "Fail to open project $prj_name, plz try again\n";
}
elsif($ARGV[0] eq "delete" || $ARGV[0] eq "d")
{
    if(@ARGV == 1)
    {
        $prj_name = <STDIN>;
        chomp $prj_name;
    }
    elsif(@ARGV == 2)
    {
        $prj_name = $ARGV[1];
    }
    else
    {
        &printUage();
    }

    -d "$base_path/$prj_name" || die "project not existing,nothing having been done.\n";

    (! system "rm -rf $base_path/$prj_name > /dev/null 2>&1") || die "Failed to delete, check your priveleges\n";
}
elsif($ARGV[0] eq "update" || $ARGV[0] eq "u")
{
    if(@ARGV == 1)
    {
        print "plz enter the project name\n";
        $prj_name = <STDIN>;
        chomp $prj_name;
    }
    elsif(@ARGV == 2)
    {
        $prj_name = $ARGV[1];
    }
    else
    {
        &printUage();
    }
    
    &clean($prj_name);

    -d "$base_path/$prj_name" || die "project not existing\n";

    open(PATH_INFO, "+< $base_path/$prj_name/path_info") || die "Failed to open path path_info file\n";

    while(<PATH_INFO>)
    {
        chomp $_;
        &parseProject($prj_name, $_);
    }
}
elsif($ARGV[0] eq "list" || $ARGV[0] eq "l")
{
    opendir(DH, "$base_path") || die "Fail to open data dir:$base_path,plz check your priveleges\n";

    while(defined(my $dir = readdir(DH)))
    {
        if(-d "$base_path/$dir" && $dir ne '.' && $dir ne'..')
        {
            print "$dir\n";
        }
    }
}
else
{
    &printUage();
}

